const Admin = require("../module/models/driver");
// const Customer = require("../General/Models/customerModel");
const User = require("../module/models/user");
const authUtils = require("../utility/userUtility");

// Protect middleware -> For access control of admin users
exports.protect = async (req, res, next) => {
  let token;
  // Checking the Authorization in headers; .
  if (
    req.headers.authorization &&
    req.headers.authorization.startsWith("Bearer")
  ) {
    // Getting the provided token.
    token = req.headers.authorization.split(" ")[1];
  } else {
    // Handling header doesn't contain AuthorizationToken.
    next(Error("Not Authorized", 401));
    return;
  }

  // ? Verifying the token is generated by this our api.
  const id = await authUtils.getUserId(token);
  // passing the id to the next middleware
  res.locals.id = id;
  next();
};

exports.protectAdmin = async (req, res, next) => {
  console.log("protectAdmin");
  const id = res.locals.id;
  // getting the user related to the current token.
  const admin = await Admin.findById(id);
  if (!admin) {
    // not authorized if user doesn't exist!
    next(Error("Not Authorized", 401));
    return;
  }

  // setting the user if it exists

  res.locals.admin = admin;
  next();
};

exports.protectUser = async (req, res, next) => {
  const id = res.locals.id;
  // getting the user related to the current token.
  const user = await User.findById(id);
  if (!user) {
    // not authorized if user doesn't exist!
    next(new AppError("Not Authorized", 401));
    return;
  }
  // setting the user if it exists
  res.locals.user = user;
  next();
};

exports.loginTokenAdmin = (async (req, res) => {
  const id = res.locals.id;
  // getting the user related to the current token.
  const admin = await Admin.findById(id);
  if (!admin) {
    // not authorized if user doesn't exist!
    next(new AppError("Not Authorized", 401));
    return;
  }

  // setting the user if it exists
  res.status(200).json(admin);
});

exports.loginTokenUser = async (req, res) => {
  const id = res.locals.id;
  // getting the user related to the current token.
  const user = await User.findById(id);
  if (!user) {
    // not authorized if user doesn't exist!
    next(new AppError("Not Authorized", 401));
    return;
  }

  // setting the user if it exists

  res.status(200).json(user);
};



